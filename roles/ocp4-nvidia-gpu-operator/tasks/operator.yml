---

- name: copy operatorgroup
  template:
    src: operatorgroup.yml.j2
    dest: /root/{{ cluster_id }}/operatorgroup.yml

- name: create operatorgroup
  shell: oc --kubeconfig auth/kubeconfig apply -f operatorgroup.yml --wait
  args:
    chdir: /root/{{ cluster_id }}/

- name: get gpu channel
  shell: oc --kubeconfig auth/kubeconfig get packagemanifest gpu-operator-certified -n openshift-marketplace -o jsonpath='{.status.defaultChannel}'
  args:
    chdir: /root/{{ cluster_id }}/
  register: get_gpu_channel

- name: set gpu channel
  set_fact:
    gpu_channel: "{{ get_gpu_channel.stdout | default(gpu_operator_version) }}"

- name: get starting csv
  shell: oc --kubeconfig auth/kubeconfig get packagemanifests/gpu-operator-certified -n openshift-marketplace -ojson | jq -r '.status.channels[] | select(.name == "{{ gpu_channel }}") | .currentCSV'
  args:
    chdir: /root/{{ cluster_id }}/
  register: get_starting_csv

- name: set starting csv
  set_fact:
    starting_csv: "{{ get_starting_csv.stdout | default('gpu-operator-certified.v' + gpu_operator_version + '.0') }}"

- name: copy subscription
  template:
    src: sub.yml.j2
    dest: /root/{{ cluster_id }}/sub.yml

- name: create subscription
  shell: oc --kubeconfig auth/kubeconfig apply -f sub.yml --wait
  args:
    chdir: /root/{{ cluster_id }}/

- name: wait for install plan to be created
  shell: oc --kubeconfig auth/kubeconfig get installplan -n {{ gpu_operator_namespace }} -o jsonpath='{.items[0]}'
  args:
    chdir: /root/{{ cluster_id }}/
  register: oc_get_install_plan
  until:
    - oc_get_install_plan is success
    - not (oc_get_install_plan.stdout | from_json).spec.approved
    - starting_csv in (oc_get_install_plan.stdout | from_json).spec.clusterServiceVersionNames
  retries: 50
  delay: 10

- name: approve install plan
  shell: oc --kubeconfig auth/kubeconfig patch installplan {{ install_plan }} -n {{ gpu_operator_namespace }} --type merge --patch '{"spec":{"approved":true }}'
  args:
    chdir: /root/{{ cluster_id }}/
  when: install_plan != ''
  vars:
    install_plan: '{{ (oc_get_install_plan.stdout | from_json).metadata.name | default("") }}'

- name: get cluster policy
  shell: oc --kubeconfig auth/kubeconfig get csv -n {{ gpu_operator_namespace }} {{ starting_csv }} -ojsonpath={.metadata.annotations.alm-examples} | jq .[0] > clusterpolicy.json
  args:
    chdir: /root/{{ cluster_id }}/
  register: get_cluster_policy
  until: get_cluster_policy is success
  retries: 50
  delay: 10

- name: create clusterpolicy
  shell: oc --kubeconfig auth/kubeconfig apply -f clusterpolicy.json --wait
  args:
    chdir: /root/{{ cluster_id }}/